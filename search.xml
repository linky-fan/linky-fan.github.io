<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[（译文）Gentoo的前世今生 第二部 (内容修订版)]]></title>
    <url>%2F2018%2F03%2F15%2Fgentoo2%2F</url>
    <content type="text"><![CDATA[前言&emsp;&emsp; 记得10来年前从第一次接触Linux到开始折腾各种发行版，再到后来在linuxfans.org上担任Gentoo版的版主，由一个菜鸟变成了一个帮助了很多菜鸟的高级菜鸟，一条路走来磕磕绊绊，当时没有什么视频也没有什么教程，有的只有去啃man文档，啃英文文档，机缘巧合之下入了gentoo这个坑，在坑里扒拉扒拉就扒拉到了这篇文章，看完之后觉得很有意思就顺手翻译了，原始的翻译文一直放在linuxfans.org的gentoo论坛里。之后的很长的一段时间“公社”陪伴我度过了人生中的跌宕起伏的好多年，有幸能认识你，真好。 本篇文章作者是Daniel Robbins，Gentoo linux发行版的创始人，于2008年因某种原因另起家门又创立了Funtoo发行版，Funtoo与Gentoo的最大的区别是使用了git作为portage的基础。而本文的原始英文版也由Gentoo的页面移动到了Funtoo的页面上。 Enoch踏出的第一步&emsp;&emsp;我在先前的文章中告诉了大家那段和Stampede开发团队在一起的、曾经最兴旺的时光和最后离开的原因（就是想离那些有低级政治目的、想控制项目的那帮家伙远点）。然而正是因为这些爱管闲事的好事者的干涉，我才会觉得装配一个自己的Linux发行版比在那种恶劣条件下改进Stampede要简单的多。幸运的是，我离开Stampede时是带着满满当当的经验离开的，这些经验与在Stampede的工作（应该是实质性的吧？）是分不开的，维护一些软件包也好、设计初始化脚本也好还是领导slpv6也好（下一代软件包管理系统），这些都使我相关方面的知识和经验得到了极大的丰富。 &emsp;&emsp;Enoch是我开始工作的这个版本的一个代号，得益于为它开发的高智能的包管理和升级系统，它将会是一个速度飞快的版本。我不得不承认这套智能化的系统在整个版本中占据了很大一部分位置，因为对于我这个光杆司令来说在那种重复性的劳动中消耗时间是没法接受的，所以才会要求开发中的系统必须自动为我完成那些琐事。另一方面完全由源代码来构建整个发行版（比那些“spin off”的版本、例如RedHat要好）也需要把工作划分好并尽可能多的挤出空闲时间来做这些工作。 &emsp;&emsp;当最基本的Enoch系统启动和运行之后，我回到了irc.openprojects.net并开设了自己的＃enoch频道。在那里我逐渐聚集起了10个开发人员组成的团队。在早期的那段时间里我们整天都聚集在IRC里，用空下来的时间制作我们的发行版。经过我们无私的付出和大家的齐心协力hack，在不断的消除bug和新的bug的过程中，Enoch每天都在变化着，不管是专业化的程度还是各方面的功能都变得越来越出色。 Enoch的第一块绊脚石&emsp;&emsp;不可避免的一天，Enoch碰到了它的第一块绊脚石。在加入了Xfree86、glib、gtk＋之后，我决定把xmms（一个基于X11/gtk＋的MP3/CD播放软件）弄进我的发行版，因为也该到了用音乐来调剂调剂的时候了！但是在安装好xmms之后启动它时……X死锁了！最初我觉得是自己使用的编译器的优化参数造成的（”-O6 -mpentiumpro”，在你看来有点诧异吧？）。第一个想到的解决办法就是用标准的编译器选项来编译，但是问题依然没有解决。然后只好到处寻找解决方法，接下来整整几个星期的开发时间我都用来追踪这个错误。一天，我收到了一个叫Omegardan的Enoch使用者的电子邮件，他也同样碰到了xmms的这个死锁问题。 &emsp;&emsp;交流了一段时间然后历经了n个小时的检测后我们发现死锁的原因在于POSIX的线程描述符（POSIX threads-related issue）。因为一些原因，pthread_mutex_trylock()函数没有返回它应该返回的值。作为一个Linux版本的创始者，这种类型的bug是我真的不愿意碰见的家伙。我指望开发人员能能够释出完美的源代码以便我可以把精力放到提高Linux易用性上，而不是把时间花在修复别人源代码的bug上。当然很快我就发现这种希望仅仅只是一个美好的想法罢了，相同的错误有时还是会出现。 &emsp;&emsp;在找到问题后，我们发现它不是xmms本身的问题，也不是gtk＋或glib的问题，也不是Xfree86 3.3.5没有thread-safe和死锁的问题，而是令人惊异的存在于Linux的POSIX的线程执行本身，具体来说就是版本2.1.2的GNU C库（glibc）的部分代码中存在bug。我很震惊的是在Linux如此核心的部分居然存在这样严重的bug（而且我们为Enoch使用的glibc的版本是它的release版本，并不是什么prerelease版本或是CVS版本！）。 &emsp;&emsp;那么怎么样才能解决这个问题呢？我们不可能马上就能拿出一个修补方案，但是在浏览了一堆glibc开发人员的邮件列表后，我偶然发现了还有一个人也碰到了相同的问题，然后在glibc开发人员在回复他的邮件里我们找到了那个附带的补丁，它为我们解决了那个线程问题。但我令我好奇的是为什么同样使用glibc2.1.2的RedHat 6没有受这个bug的影响（当时RedHat6的发布时间先于那个补丁的出现）。为了找到答案，我下载了RedHat里glibc的SRPM包（source RPM）想看一下他们使用的补丁是怎么样的。 &emsp;&emsp;RedHat有他们自己的glibc补丁来解决pthread_mutex_trylock()函数的问题。显而易见的是他们也碰到了同样的问题，然后自己进行了修补。但是由于RedHat没有把这个补丁回馈到glibc的开发社区，其他人们就没有办法分享这个补丁。但是也可能是RedHat把这个修补方案回馈到了glibc的开发社区，然儿glibc的开发人员并没有接受这个修补方案。或者这个bug只会在特定版本的binutils和特定版本的编译器连用时才会触发，然而RedHat使用的binutils和编译器的版本并不是这两个特定的版本（虽然RedHat还是给出了这个补丁）。我猜测我们永远也不会知道究竟事情的真相是什么样的，但是我学会的一件事情是：RedHat的SRPM包里有很多定制的补丁和增强代码，而这些代码和补丁看来从来没有回馈到原始的开发人员那里。将会我应该会为此来上一段激昂的演说。 激情的演说&emsp;&emsp;当你将一大堆各种各样的源代码汇聚成一个Linux发行版时，把所有你做好的bugfix和补丁反馈给原始的某个软件包的开发人员是一件相当重要的事情，就如我了解到的那样，这是发行版的开发人员为Linux做贡献的很多途径中的一个。我们也恰好就是这样的一群人，为的就是把很多不同的程序和软件集合在一起，让它们工作起来就像是一个整体。将来我们也会把对一些软件所做的修改和补丁反馈回原始软件的开发人员以便其他的用户和后来的发行版能从中受益。如果你只是把补丁留在你自己那里，这样做不会对任何人有什么帮助，很多人们将会为一些相同的问题浪费掉大量的时间。这种不顾别人的方式违背了整个开源世界的精神和宗旨，同时对Linux的发展也只是有害无益。或许我应该说这样的做法对我们来说就是一个大大的“BUG”。 不幸的是一些发行版（啊咳）（RedHat）并不如其他一些版本（Debian）那样对整个开源社区分享他们的成果。 编译器的艺术&emsp;&emsp;在我们尝试解决glibc 线程问题的时候，我给Ulrich Drepper发了封email（他是Cygnus的一员并且在glibc的开发中举足轻重）。我在e-mail中提到了我们碰到的POSIX线程问题和我们在Enoch中使用pgcc来获得优化的性能。在他的回信中他这样提到（我解释一下）：“我们自己S使用的包含在CodeFusion中的编译器制作的可执行代码比其他的一些编译器、比如pgcc编译出来的代码执行速度更快速。”显然我对测试测试Cygnus那帮家伙开发的神秘的“turbo”编译器非常有兴趣。 &emsp;&emsp;因此我申请拿到了一个Cygnus Codefusion 1.0的demo拷贝以便我可以对它的性能做一个测试。Omegadan和我对测试的结果很吃惊，它同Ulrich提到的那样出色。x86的后端提高了90％的有关cpu-intersive的可执行文件的执行效率（比如bzip2）。几乎每一个程序都能从中获得至少10％的真实世界的性能提升，而我们所作的仅仅是换了一个编译器。Enoch的速度也因此获得了30％－40％的提升。同时性能也提高了不少，提升的幅度超过了我们以前把编译器从gcc切换到pgcc时提高的幅度。显然，在对这个编译器的测试后，我们很希望把这个编译器包含在Enoch中，有点幸运的是CodeFusion CD中的包含的源代码遵循的是GPL，这样在Enoch中使用这个编译器已经可以算是已经得到了完全的认可了……….，至少我们是这么想的。 异常事件的发生&emsp;&emsp;为了能在Enoch中使用这个编译器，我给Cygnus的市场部主管发了一封电子邮件，但是期望中的“哦，拿去用好了，感谢使用我们的编译器！”这样的回复并没有收到，取而代之的是一句“虽然在技术上我们许可使用Cygnus的编译器，但是我们强烈建议不要在在Enoch中使用该编译器或是包含它的源代码。接着在我的回复中我问了他们这样一个问题：“既然不愿意让别人使用它的源代码，为什么还在以GPL的许可条例来发布它的源代码？”作为一个猜测，我觉得他们事实上是不想以GPL的方式来发布他们的源代码的，但是由于这个编译器是源自egcs（以GPL方式发布的），他们除了以GPL方式发布之外别无选择。 &emsp;&emsp;这是当某一个公司想使用开源的代码来生产私有产品这样的情况时，GPL如何阻止这样的事情发生的一个很好的例子。我比较有根据的一个猜测是Cygnus担心我们使用这个编译器后将会打击到他们整个产品框架的销售，更加奇怪的是不管是他们的行销方案还是InfoWorld的预览中都没有提及包含在CodeFusion中的那个新的编译器，因为CodeFusion销售的是一套“development IDE”而不是一个编译器。 &emsp;&emsp;为了缓解一下他们那种偏执的态度，我提出了个建议，就是在我们的Enoch主页上放置上CodeFusion的签注文件并加上一个链接来刺激CodeFusion的销售。从我个人的观点来说，我不认为一个“turbo”的Enoch会影响到CodeFusion（虽然它是一个IDE产品）的销售情况。但是我还在想方设法的令到他们愉快，比如告诉他们这个IDE的组件是一个商业化的产品，我们也并没希望或者有什么意图用Enoch来发行它。 &emsp;&emsp;我把这个（大方的）请求用电子邮件的方式发给了Cygnus，但是收到的确实另一个奇怪的回复。他们想通过授权得到所有我们关于“市场”方面的内容资源（显然，这也包括了我们网站上的内容），真是太令人震惊了。Cyguns的营销团队似乎对Linux社区和GPL的运作一无所知，事到如今我终于决定终止与Cygnus彼此间的联系，因为再这样下去事情会变得怎么样谁都不知道。与此同时，我们为Enoch准备了两个版本，一个是内部的“turbo”版，一个是公开的“non－turbo”版，其实就是把决定留在将来再去做。 &emsp;&emsp;但是几个月之后，他们就把CodeFusion x86的backend换成了gcc 2.95.2，现在不只是那些知道包含在CodeFusionCD中的“隐秘的GPL编译器”的这群人可以获益，几乎每一个人都可以从这个新的优秀的backend中获益了。然后我们还是决定继续前行，尽量使用gcc来替代CodeFusion的编译器。在gcc 2.95.2已经越来越成熟的情况下，我们已经可以放开Cygnus了（同时，RedHat却为购买这个CodeFusion而花费了比较冤的一笔钱了。）（注：新的x86版本gcc 2.95.2的backend为新的Linux发行版提供了一开始我们提到的很重要的速度提升，它也为FreeBSD 4.0相对3.3.6版本速度上提升做出了很大的贡献。你注意到这两个提升的不同点吗？） 肥皂盒&emsp;&emsp;感谢这件事情和其他的一些经验，我从中对那些以开源为主要获利手段的企业有了很深的理解。虽然对个人来说，乐于生产私有闭源软件这件事情并没有任何错误的地方，但是一个开源企业搅乱或是拒绝与其他的开源世界合作是没有任何意义的；同样，不支持GPL或是其他的等等也没有什么意义。这是一个实践性质的并具有现实意义的观点。 &emsp;&emsp;思想和代码上自由的交换才是开源企业得以获利的根本，这点他们应该充分的认识到。反过来，对立与GPL标准只会破坏这个他们依赖于发展与繁荣的环境。换句话说，开源的环境是你事业的土壤，保护这片土壤的纯净还是很有意义的。 &emsp;&emsp;我也懂得在短时期内保留一些代码上秘密来获得财富的累积是一个颇具诱惑性的东西，先进的代码和特别的技术提供给了人们一个在竞争中获得优势的绝好机会，由此可以获得增长的销售业绩和利益。但是当你的目的是成为一个唯一的产品提供者，而这个产品商业的成分大于开源的成分时，开源世界是不会许可这样排外性质地使用开源或是相关东西的，这就是开源的意义。 回到Enoch现在，我从自己的肥皂盒中出来并继续我的故事。 &emsp;&emsp;由于Enoch已经变得越来越出色，更名的计划也就这样列入了我们的议事日程当中，接着“Gentoo Linux”诞生了。然后就是朝Gentoo Linux 的1.0版本努力前进中。大约也是这个时候，我决定帮我那台Celeron 300M（超频到450M并且十分稳定）的老电脑升级一下，新平台是一块崭新的Abit BP6主板（从市场上找到的双Celeron接口的）。在卖掉了老主板后我把我两个Celeron 366的系统集中起来，然后把Celeron 366超到了500Mhz后就开始工作了。但是我注意到我的新机器不是非常稳定。 &emsp;&emsp;显然我第一个反应就是把频率改回没超之前的366Mhz，但是随之而来却遇到了一个更奇怪的问题：不管CPU全速运转多少时间，系统都不会死锁；但是一旦空闲下来过一夜的话，系统有很大的可能就会完全死锁掉。是的，这是一个idle bug－－－－噢！在作了一些调查之后，我发现在这块主板上也有其他用户碰到了这个相同的问题。原因是BP6主板上的一个芯片（可能是PCI控制器）与标准规格有点不同或是比较古怪，这个东西就是造成Linux在空闲时候死锁的主要原因。 &emsp;&emsp;我渐渐的心烦意乱起来，因为我没法再去采购另外的PC部件了，Gentoo的开发也只好被迫终止下来。我也开始对Linux越来越有些悲观的情绪了并决定转向FreeBSD。是的，FreeBSD！这部分就此为止了，我们Part3再见了：） 原文出处：https://www.funtoo.org/Making_the_Distribution,_Part_2 翻译：linky_fan@www.linuxfans.org 2006-8-2 第一次增加2006-8-9 第二次增加2006-8-10 第三次增加2018-3-15 修改于上海]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（译文）Gentoo的前世今生 第一部 (内容修订版)]]></title>
    <url>%2F2018%2F03%2F13%2Fgentoo1%2F</url>
    <content type="text"><![CDATA[前言&emsp;&emsp; 记得10来年前从第一次接触Linux到开始折腾各种发行版，再到后来在linuxfans.org上担任Gentoo版的版主，由一个菜鸟变成了一个帮助了很多菜鸟的高级菜鸟，一条路走来磕磕绊绊，当时没有什么视频也没有什么教程，有的只有去啃man文档，啃英文文档，机缘巧合之下入了gentoo这个坑，在坑里扒拉扒拉就扒拉到了这篇文章，看完之后觉得很有意思就顺手翻译了，原始的翻译文一直放在linuxfans.org的gentoo论坛里。之后的很长的一段时间“公社”陪伴我度过了人生中的跌宕起伏的好多年，有幸能认识你，真好。 本篇文章作者是Daniel Robbins，Gentoo linux发行版的创始人，于2008年因某种原因另起家门又创立了Funtoo发行版，Funtoo与Gentoo的最大的区别是使用了git作为portage的基础。而本文的原始英文版也由Gentoo的页面移动到了Funtoo的页面上。 我和Linux&emsp;&emsp;现今对每一个linux爱好者来说，linux不再只是一个字面上的名称，她所呈现的一切对很多开发人员来说已经超过了他们所接触过的任何东西，linux比它们更强大、更令人着迷和称赞。当我在新墨西哥大学担任系统管理员时便与linux结下了不解之缘。那时因为我们的NT服务器运行得非常棒，手头上的空余时间也多了不少，为了不虚度光阴，一台Pentium 166的主机被我选中来试试全新的linux操作系统。接下来的不断学习和深入理解的过程使我对linux越来越着迷了…… &emsp;&emsp;一开始学习了linux下的很多细节的东西：网络访问、执行备份、搞定samba等等。接着我建了一个qmail和apache的服务器并学习了python编程和shell编程。另外我还搭建了一个小型局域网接着把linux请回了家，在尝试过很多发行版后我最终选择了Stampede Linux这个版本（注：该版本从2001起就没有再更新了）。 &emsp;&emsp;你知道学习linux的过程是怎么样的吗？：第一、努力搞清楚linux基本的东西；第二、当你已经是个熟练工之后，学习定制你的linux，知识的累积会和你深入的程度成正比。由于linux并没有隐藏任何东西，当你觉得linux已经越来越得心应手之后就可以开始探究其中的技术和那些实现这些技术的工具了。 Linux的潜能&emsp;&emsp;Linux提供了很多以前我所没有见到过的东西，如果一定要我用一个词来形容这些不可思议的话，我选择“潜能”这个单词：用来维护、改变、提高事物的能力，这种能力甚至能够冲破一些固有规则的束缚。 当我把kernel升级到一个更新的版本时，简简单单的就把我眼前的这个linux的性能提升了很多，更为令人兴奋的是这种改变几乎每时每刻都在进行着。而我也正是这种进步的一份子，伴随着linux的前进而不断进步着， 对我而言这种感觉真的很棒。 &emsp;&emsp;如果你和我是同一类人，在你进入开源世界和linux世界之前大概看过位于Redmond和Cupertino的那些大公司们准备的下一代操作系统，它们确实如你所愿般的完美，然而那些东西却始终都只是一个虚幻的影子而已。然后就在我们慢慢等待的过程中linux来到了我们面前。虽然等来的这个精灵并不如我们预料的那么完美，但是她却提供给了我们这些喜欢动手hack的汉子和妹子一个亲手改变她的机会。就这样我们一边期待着一个更强大的操作系统，一边津津有味的hack我们的linux。日子一天一天过去，直到某天我们才突然发现原来期待着的那个强大的操作系统其实就在我们自己的手中，大家不约而同的笑了起来，也决定了继续在linux这条路上走下去。 Linux的人文艺术&emsp;&emsp;我学到的另一件事就是Linux对人们的影响，这个话题可能听上去还真有点新鲜，是吧？Linux不仅仅只是一堆源代码的，它其实就是一个“社区”，从一开始的依赖这个社区解决我们提出的问题到付出我们的时间和经验帮助他人，直到我们也渐渐地成为了这个社区的一部分。 &emsp;&emsp;IRC (Internet relay chat)既是一个交朋友的好地方也是一个很打发时间的场所。irc.openprojects.net上的#stampede频道已经成为了我在网络上正式的安乐窝^-^。那是我解惑的地方，也是第一次传道的地方。#stampede频道需要很多有安装经验的用户去帮助那些新手解决他们刚刚开始安装后碰到的各种各样的问题。由于那些新手在安装过程遇到的问题在irc中越来越普遍，原来很多有经验的Stampede Linux用户渐渐失去了他们一开始的热情变得麻木起来。但是我依然还是很兴奋，因为很多菜鸟的问题我都知道解决的办法，要我忍着不回答那些问题我可做不到！当然我也并不是唯一的那个对解决新手问题乐此不彼的人，同样的家伙也有不少。我也承认自己也有那么点私心，想从那些更有经验的家伙们（不是指Stampede的开发人员）身上学到更多的东西。 如何起步&emsp;&emsp;当有朋友问我如何才能加入一个开源项目时，我告诉他们的是首先是找一个能为他人做些什么的地方，就算那里只是解答一些很基础的问题。一份诚挚的渴望帮助他人的愿望是通往Linux社区的通行证，因为这份诚挚的愿望同样也扎根在每一个开源项目开发人员的心中（对开源来说，Linux只是其中很小的一朵浪花），这份诚挚也应该扎根在那里。 &emsp;&emsp;沿着这条路走下去不可避免的你会遇到比你更有经验的同志，你将会从他们身上学到更多的知识，就像以前新手从你身上学习时一样。另一方面，当你积累起更多的经验时在碰到某些问题时你就会用一个新方法去解决它而不是用以前惯用的一套思路。你遇到的一些开发人员有时会提出一些建议，有时又或者会需要一些帮助，他们更可能会邀请你加入他们的开发队伍；如果你的助人为乐成为焦点时，他们可能会笑着从你身边经过；如果你帮助了很多很多人之后，你在社区内肯定会备受瞩目。在Stampede和我身上这些故事都曾经发生过。 &emsp;&emsp;渐渐的我在Stampede的开发越来越深入，不久以后我就成为了一个正是的Stampede开发人员。在受到了Stampede的领导者 Matt Wood的鼓励后，我开始对用于Stampede Linux软件包的原有的.slp机制进行升级。当时，.slp软件包格式包含一个.tar.bz2的软件包和后面的一个包含软件描述及软件包创作者等等在内的一个定长的页脚。这种实现的方式有两个主要问题，一是页脚部分实际上包含的内容根本达不到定长所约定的字节数；二是该格式没有预留任何扩充余地（也就是说如果未来没有办法加入一些可能需要的额外信息）。显然这些问题需要动一次大手术了，活活。 &emsp;&emsp;和那些老资格的Stampede开发人员工作一段时间后，我拟了一个解决上面那些问题的草案。过了一阵子我便开始用Python先编写了一些原始的实现方案，新的格式(代号slpv6）有些类似与Amiga世界的IFF格式。下一代的.slp格式包含了了2 32（注1）个字段，字段分类为2 32种，每个字段最大数据段同样为2 32bytes。新的格式不仅具有良好的扩充性而且比纯文本更加紧凑和简洁并易于解析。二进制代码和文本都能存储在这样的格式当中，该架构对其本身在未来的进一步发展带来了无限的可能性。我的想法是把这个新版的动态header加入到打包文件的结尾部分，从而这个新版本的.slp格式未来可以为Stempede用户服务相当一段时间并且同时又能和标准的UNIX档案文件保持不错的兼容性。 丑陋的一面&emsp;&emsp;slpv6的开发进展很顺利，所有的资深开发者看到我取得的成果后都很高兴。不幸的是，两名刚加入的Stampede开发者想要自己掌控slpv6项目。由于不欣赏我选择的开发方向，他们花了很大劲诋毁和打击这个新的slpv6系统，虽然我也用了大量时间一手继续我的开发一手加入讨论，再腾出一只手回应他们的攻击，但是这样做也没从根本上解决问题。最后一切都变的很明了，他们只是很擅长辩论，并且显而易见的是除非走他们自己的路子，不然是不会罢休的。幸运的是我的项目依然得到了资深开发人员的认可和支持。可是这些讨论渐渐地使我背上了一些包袱，同时对Stampede的开发也产生了一些不好地影响。唉。。。。。。。 &emsp;&emsp;可惜我没办法使这些家伙消失，原来还可以在＃stampede频道里和那些高级的开发者互相交谈，但是现在不得不退了出来。每次只要我一进入那个频道，他们就开始变得很不友好，总是在破坏我想要进行得工作。这些家伙会使用各种各样的方法：比如一个开发者会议（其实只是想当着其他资深开发者的面侮辱我）。他们还尝试用投票的方法控制Stempede，当然那种投票只在他们可以得到更多支持的时候才会举行。但是自始至终我在这样的情况下都没有放弃过我得slpv6的开发工作。不用多说，资深开发者都喜欢我的开发项目也都支持我继续做下去（没有他们的支持，我不可能克服那么多困难坚持下去）。 对这些异类的了解&emsp;&emsp;我习惯于把这两个家伙和这种类型的开发者称为“异类”。虽然我的开发工作因此变得很很不愉快，但是我还是学会了怎么样去对付他们。就这点我乐于给各位提供一个对这些“异类”的全方面的描绘：他们的品质、采用的方法以及当你作为一个项目领导者怎么样才能对抗这些”异类“或是尽可能的用最小的代价去改变他们。 &emsp;&emsp;为了消除情绪上可能存在的危险，你需要具备一个先决条件：意志力。如果你不能用一种既礼貌又态度坚决的方式回应你的对手，事情就会变得很糟糕。“异类”的目的就是尽可能多的在你的项目中取得控制权，这么做会使他或她感觉更具有力量。首先，他们会对某个项目或是项目的开发人员进行片面的指责和抱怨，同时他们也会阻止那些对这个项目富有建设性的提议。当然这些家伙在他们获得项目管理人员位置之前也不会对这个项目伸出任何的援手。目的就是使你确信只有依靠他们的那些“独道的、富有素养”的眼光才能最终解决问题，这样你就不得不给他们足够的权限去实现这些。 &emsp;&emsp;如果指责和抱怨没起什么作用，这些“异类”就会要求举行一个开发者会议。这将会给他们一个可以分裂你开发团队的机会。在觉得本方这方面已经得到了大多数人的支持后，他们就会举行一次投票决定（当然他们知道赢的会是他们的情况下）。如果并没有赢得投票或是投票被驳回，那么下周他们还是会提出举行一次会议以便再一次的分裂你的团队，然后再是那种无休止的循环。 &emsp;&emsp;如果会议的方法行不通，“异类”们将会变成革新运动者。他们会用一种更民主（也就是更容易操纵）的办法来取代先前压迫性的和非公平的决策方案。这些办法常常包括令人信服的让你去为你的开发团队中的大部分人做任何事。异类比较偏爱这个办法，因为你没有办法弃大多数投票表决的结果于不顾（呵呵哒）。当你许可这些事情发生的时候，握在手里的“Lexus”的“钥匙”也就落入了他们的手里，而你却无能为力。 &emsp;&emsp;“异类”们用的另一种方法是激怒你的主要开发人员并使他们离开，然后在你的开发团队混乱的时候尝试重新组织该项目的管理团队。如果所有的努力都没有成功的话，他们会聚集尽可能多的叛离者并把他们从你的项目中fork出去，这是多么痛的领悟！ 对付这些异类&emsp;&emsp;区分这些家伙还是相当容易的。他们不会写一行代码（也不愿意写），相反他们会花大量的时间讨论那些更重要的问题（对了，就是那些管理方面的问题）。假设你是一个项目管理者，对付他们非常容易。只需要告诉他们，在没有看到高质量的代码之前你是不会考虑他们所谓的建议的。或者在他们提出”建设性“的批评之前强调对于某个项目有建设性得帮助也包括服从项目的管理人员。如果他们开始编制优质的代码并且越来越有易于这个项目，那么就太好了。如果没有，就告诫他们离开。在你忽略这帮家伙一段时间后，他们会选择离开或是一边采取行动一边写一些代码，世界就这样清净了^_^。 &emsp;&emsp;不幸的是Stampede的那些资深开发人员对”异类“并没有采取更多的管理措施。换句话说，他们许可了这两个家伙对我（和其他人）的无休止的纠缠。虽然这些资深开发者总是赞赏我的项目，但是对那两个家伙他们却并没有做的更多。然后终于有一天我决定制作一个自己的发行版，因为我觉得这样做比忍受那两个家伙更容易些。我退出了Stampede的开发团队并开始制定自己发行版的一些计划和草案。 &emsp;&emsp;一段时间之内，我对自己因为两个低等级开发者而离开一个项目还是感到有些不可思议。其实他们没有涉及到的实际情况却真正显示出这个项目存在很严重的管理方面的问题，如果高等级的开发人员不能或者不愿意确认Stampede的开发成果是可喜的和有益的话，我想我不会愿意继续留在那里。 新的开始&emsp;&emsp;离开Stampede后我做的第一件事就是长长的舒了口气。喔……，整个世界都清净了。现在我有了足够的时间来思考我自己的Linux发行版的轮廓和将给Linux发行版的圈子带来什么新的贡献。对Stampede感兴趣的一件事是它所具有的原生的性能（这得感谢它使用的带有实验性质的、并针对Pentium处理器优化过的pgcc编译器），所以我决定首先我考虑的就是性能。除了更少的CPU占用率以外，我还希望它更精简。很多发行版本（特别是那些流行的使用光盘封装的家伙）默认启动了太多的daemons以至于打开一个xterm（X环境下的终端）后系统所剩余的可用RAM已经所剩无几了。我希望自己的发行版能更小也更强，为此我把目光放到了最大限度的榨取让这个操作系统运行的硬件平台的性能上。为此我下决心进行一个整体测试并处理掉所有细节中的性能方面的问题。 &emsp;&emsp;但是我真的很 缺乏对应的资源，因为我是这个发行版的唯一的一个开发人员！我该怎样做才能只靠自己就鼓捣出不逊色于Redhat或是Caldera这样的产品呢？解决办法是采用自动控制技术。我必须写一些脚本以便所有的事情都可以自动搞定，这样我就可以事半功倍了。毕竟，电脑们这些方面做得更好，对吧？ &emsp;&emsp;很快我发现光是写一些自动化的脚本还远远不够，需要设计的是一整套能从源代码产生一个完整Linux系统的机制。我实验性的把它称做ebuild系统并且开始了工作。ebuild系统可以自动的建立所有一个发行版所需要的二进制文件，包括从解压源代码并打好相应的patch再到编译、封包的一系列过程的自动化解决方案。在一个基本、原始的ebuild可以工作后，我开始为一个Linux发行版必要的一些关键组成部分（像是gcc、glibc、binutils、util-linux和friends）撰写ebuild脚本。通过重新撰写初始化脚本（基于以前我为Stampede设计的初始化脚本）把原先的Stampede开发系统逐渐的演变成一个我自己的系统，接着用来测试每一个我自己建立好的新的软件包。 &emsp;&emsp;几个月之后我有了一个完整的，自主的Linux版本。我给她起了个名字『Enoch』然后坐着满足得笑了起来。但是什么改变了Enoch、Gentoo的发展又是怎么样的？续篇将会告诉大家Enoch是怎么演变成Gentoo的和我在这条路上将要面对的许多新的挑战。 敬请期待^_^ 翻译：linky_fan @ www.linuxfans.org 原文如下：https://www.funtoo.org/Making_the_Distribution,_Part_1 注1：我觉得应该是2的32次方，原始文档2和32之间只是一个空格。]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github和Coding同步部署hexo说明(Seo篇)]]></title>
    <url>%2F2018%2F03%2F12%2Fgitandcoding2%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp; 上周把hexo的github和coding的同步部署折腾了一下，用起来还是相当的顺手的，因为还是想让搜索引擎收录下自己的小blog，后期研究了很久seo的方式，写下来一方面是做个笔记，一方面是给有需要的弟弟妹妹们留个文档。Github和Coding同步部署hexo说明（前篇）。老样子先贴一点环境变量，我用的theme是NexT，其他的theme差别不大。 安装的package，大家可以对比一下上篇中的这个文件，很容易找到不同的地方。123456789101112131415161718192021222324252627282930313233343536373839$ cat package.json &#123; "name": "hexo-site", "version": "0.0.0", "private": true, "hexo": &#123; "version": "3.6.0" &#125;, "dependencies": &#123; "gulp": "^3.9.1", "gulp-htmlclean": "^2.7.20", "gulp-htmlmin": "^4.0.0", "gulp-minify-css": "^1.2.4", "hexo": "^3.6.0", "hexo-deployer-git": "^0.3.1", "hexo-filter-github-emojis": "^1.4.4", "hexo-footnotes": "^1.0.2", "hexo-generator-archive": "^0.1.4", "hexo-generator-baidu-sitemap": "^0.1.2", # 上面多出来的这一行就是给baidu准备的，当你运行hexo g之后，在你的public目录中就会多出2个文件， # 一个是baidusitemap.xml，还有一个sitemap.xml是给google用的。 "hexo-generator-category": "^0.1.3", "hexo-generator-feed": "^1.2.2", "hexo-generator-index-pin-top": "^0.2.2", "hexo-generator-json-content": "^3.0.1", "hexo-generator-searchdb": "^1.0.8", "hexo-generator-sitemap": "^1.2.0", "hexo-generator-tag": "^0.2.0", "hexo-renderer-ejs": "^0.3.0", "hexo-renderer-marked": "^0.3.0", "hexo-renderer-stylus": "^0.3.1", "hexo-server": "^0.2.0", "hexo-tag-aplayer": "^2.0.7", "hexo-tag-dplayer": "^0.3.1", "hexo-tag-flickr-extended": "0.0.3", "hexo-wordcount": "^3.0.2" &#125;&#125; 有了这两个文件之后加上你在域名提供商那里买来的域名就可以开始玩seo了，如果你按照我的上篇设置过同时deploy到2个git仓库了，肯定是想做个双线的dns解析，把国外的流量指向github，把国内的流量指向coding，实现的方法很容易，参考一堆百度或是google上的dnspod的文章即可，这里就不做进一步的引述了。在调整dns之前，需要做的第一个事情是修改一下你的hexo的配置文件加入你自己的域名配置以便生成正确的sitemap。 1234567891011121314151617181920212223242526272829303132333435$ cat _config.yml # Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 你的标题subtitle: 你的子标题description:author: 你自己language: zh-Hanstimezone: # URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'#把下面的url改成你的域名，注意一下http和https，在coding上开启https会启用Let's Encrypt的https签名，很是个方便，因为我虽然部署了github和coding，但是域名只指向了coding，github那个纯当备份了。**url: https://你的域名**root: /permalink: :year/:month/:day/:title/permalink_defaults:# 加下来在博客目录的source目录下加入robots.txt文件，方便爬虫来爬我们的小站。$ cat source/robots.txt # hexo robots.txtUser-agent: * Allow: /Allow: /archives/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: 你的站点/sitemap.xmlSitemap: 你的站点/baidusitemap.xml 在完成了上面这部之后可以运行hexo g和hexo d直接部署了。剩下的事情就交给搜索引擎了，启动浏览器访问baidu或是google，在搜索栏里输入site:你的域名，没做过seo的话肯定是空空如也的，提示 很抱歉，没有找到与“site:blog.cissp.com”相关的网页。 这个时候点击提交网址一步一步就可以提交了，google也是如此方法，只不过google多了一个向域名提供商验证域名所有权的过程，会比较慢。全部做完提交后等24小时后就差不多了，再去搜索一下看看成果吧。 关于google和baidu添加收录的过程文档都有不少，我这里就不重复做轮子了，大家可以去网上多看看。]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github和Coding同步部署hexo说明(搭建篇)]]></title>
    <url>%2F2018%2F03%2F08%2Fgitandcoding%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;自从看到了hexo这个能在github上部署blog的东西就喜欢的一塌糊涂，各种上谷歌，百度找资料，花了7-8天时间搞了起来，天天写blog的日子真的蛮好了，每天不写的什么就仿佛缺了点什么似的痒痒的不行。在这里分享一下这么多多天碰到的一些坎和一些翻过坎之后的经验。话不多说，先上些环境参数: hexo版本 123456789101112131415161718$ hexo -vhexo: 3.6.0hexo-cli: 1.1.0os: Linux 4.15.6-1-ARCH linux x64http_parser: 2.8.0node: 9.7.1v8: 6.2.414.46-node.20uv: 1.19.2zlib: 1.2.11ares: 1.13.0modules: 59nghttp2: 1.29.0napi: 2openssl: 1.0.2nicu: 60.2unicode: 10.0cldr: 32.0.1tz: 2017c 使用的NexT版本 NexT on github 12# Theme versionversion: 6.0.4 安装的npm module，使用flickr的原因是图都上传在flickr上，不想用国内的图床。 1234567891011121314151617181920212223242526272829303132333435$ cat package.json &#123; "name": "hexo-site", "version": "0.0.0", "private": true, "hexo": &#123; "version": "3.6.0" &#125;, "dependencies": &#123; "gulp": "^3.9.1", "gulp-htmlclean": "^2.7.20", "gulp-htmlmin": "^4.0.0", "gulp-minify-css": "^1.2.4", "hexo": "^3.6.0", "hexo-deployer-git": "^0.3.1", "hexo-filter-github-emojis": "^1.4.4", "hexo-footnotes": "^1.0.2", "hexo-generator-archive": "^0.1.4", "hexo-generator-category": "^0.1.3", "hexo-generator-feed": "^1.2.2", "hexo-generator-index-pin-top": "^0.2.2", "hexo-generator-json-content": "^3.0.1", "hexo-generator-searchdb": "^1.0.8", "hexo-generator-sitemap": "^1.2.0", "hexo-generator-tag": "^0.2.0", "hexo-renderer-ejs": "^0.3.0", "hexo-renderer-marked": "^0.3.0", "hexo-renderer-stylus": "^0.3.1", "hexo-server": "^0.2.0", "hexo-tag-aplayer": "^2.0.7", "hexo-tag-dplayer": "^0.3.1", "hexo-tag-flickr-extended": "0.0.3", "hexo-wordcount": "^3.0.2" &#125;&#125; 同时上传至github和coding，修改文件blog主目录下的配置文件 12345678 # Deployment # Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: git@github.com:YOURNAME/YOURRES.github.io.git coding: git@git.coding.net:YOURNAME/YOURRES.git branch: master 修改和NexT theme的config.yml和layout中的footer.swig，加入coding的链接然后审核一下就可以去掉自定义页面中会出现的跳转页面。 123456# 修改footer.swig的最后定义custom_text的地方，去掉原有的注释。&#123;% if theme.footer.custom_text %&#125; &lt;div class="footer-custom"&gt; &#123;&#123; theme.footer.custom_text &#125;&#125;&#123;#&#125;&lt;/div&gt;&#123;% endif %&#125; 针对主题配置文件的修改网络上现存的都是直接修改footer.swig，我试过只修改这个配置文件对新版本的theme没用，后来看主题配置文件的时候看到了人家已经写好了这么一行，把注释去掉特别方便。 12345678910111213141516171819202122232425#修改NexT主题目录下的配置文件，打开custom text的选项。#我这边只关闭了powerd和theme版本的说明，嫌麻烦。。。。$ vim themes/next/_config.yml footer: # Specify the date when the site was setup. # If not defined, current year will be used. since: 2018 # Icon between year and copyright info. icon: chess-knight # If not defined, will be used `author` from Hexo main config. copyright: # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false # ------------------------------------------------------------- # Any custom text can be defined here. custom_text: Hosted by &lt;a target="_blank" rel="external nofollow" href="https://pages.coding.me"&gt;&lt;b&gt;Coding Pages&lt;/b&gt;&lt;/a&gt; 目前hexo+NexT的搭建就算完成了，基本的配置google，baidu一下会有很多，搭建的细节就不多说了。接下来的SEO搜索引擎优化和https请参考我的另外一篇文档Github和Coding同步部署hexo说明(Seo篇) ，另外新版本的theme配lean会报错，目前还没找到什么好办法。]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一边是海水，一边是阳光]]></title>
    <url>%2F2018%2F03%2F05%2F%E4%B8%80%E8%BE%B9%E6%98%AF%E6%B5%B7%E6%B0%B4%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp; 去完很有名的航母博物馆的一行人来到了今天行程的第二站–科罗拉多岛。对我们家小橙橙来说，沙子、卷起的裤腿、海边这些就足以满足了，当然如果再给他一把铲子就更完美了，没铲子在手的他用小手挖隧道，堆沙包也是其乐无穷的。&emsp;&emsp;如果下一次安排行程，一定要在圣迭戈的好地方待上个五天，天天坐在沙滩边看着小屁孩挖挖沙子，看看潮起潮落，庸庸懒懒过上一天也不赖。当然在海边又有沙滩，拍几张愉快的照片也是必不可少的。 在此要感谢老婆大人，辛苦了很久做攻略，攻略做的就是好，2月14日在海边渡过也不错。]]></content>
      <categories>
        <category>美国</category>
      </categories>
      <tags>
        <tag>游记 美国</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[传说中的彼岸花]]></title>
    <url>%2F2018%2F03%2F01%2FLycoris_radiata%2F</url>
    <content type="text"><![CDATA[Lycoris radiata彼岸花。开彼岸，只见花，不见叶。日文：曼珠沙华（man jyu sha ge）这个名字来自梵语（ma?jusaka）(u上有一横，s下有一点) 「摩诃曼珠沙华」原意为天上之花，大红花，天降吉兆四华之一.佛典中也说曼珠沙华（曼殊沙华）是天上开的花，白色而柔软，见此花者，恶自去除. 也有些人认为彼岸花是「荼蘼」，不过荼蘼是蔷薇科的植物 日文：彼岸花（higan bana）的别名也是曼珠沙华，大都是说红色的那一种彼岸花所以在日本说曼珠沙华一般说是彼岸花中文可以找「红花石蒜」学名：Lycoris radiata科名：AMARYLLIDACEAE（石蒜科）属名：Lycoris种名：radiata中文：红花石蒜英文：cluster amaryllis，Shorttube Lycoris原产地是中国大陆，台湾，金马也有。 &emsp;&emsp;日本在日高市巾着田盛开彼岸花，之前在 Yahoo Travel有看过介绍秋天赏红叶之外，也可以去看看盛开的彼岸花，日经新闻也有报导过，现在的品种推测为两千多年前，自中国运来北九州。 &emsp;&emsp;由於「秋彼岸」之时开花，因而称之「彼岸花」，彼岸花字面上看来，後来常常也被用为佛教的「彼岸」之意。 &emsp;&emsp;春天是球根，夏天生长叶子，秋天立起开花，冬天叶子又慢慢退去，如此轮回。而花叶永不相见，也有著永远无法相会的悲恋之意。 彼岸花（曼珠沙华）日本的花语是「悲伤的回忆」 韩国的花语则是「相互思念」 &emsp;&emsp;严格说起来，现在经常说的曼珠沙华只是彼岸花的一个别名。不过普遍都已经正反过来互用，行之已久去买花，花屋也知道：曼珠沙华＝彼岸花； 彼岸花&emsp;&emsp;彼岸花是开在黄泉之路的花朵，在那儿大批大批的开着这花，远远看上去就像是血所铺成的地毯，又因其红的似火而被喻为”火照之路” 也是这长长黄泉路上唯一的风景与色彩. 人就踏着这花的指引通向幽冥之狱。 &emsp;&emsp;阳光弥漫，洒落了一院子，空中有微风吹过的声音。僧人的颂经声此起彼伏，钟声，从头顶，向天际，一路响彻云宵。慢慢地，四周终又趋于宁静，超出三界外，不在五行中。 我知道逝者如斯，正如潮水般退去。我看到弱水彼岸，有一枝花，无茎无叶，艳红地燃烧。 悠悠的思念，无法克制。。。。。。]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[火炬之殇]]></title>
    <url>%2F2018%2F02%2F28%2F%E5%A4%A9%E5%A0%82%E9%87%8C%E7%9A%84%E7%81%AB%E7%82%AC%2F</url>
    <content type="text"><![CDATA[天堂里的火炬&emsp;&emsp;十几年前的那个燥热的炎夏我第一次登录进的这个论坛，在接下来的很长的时光中陪伴我经历了快乐与感伤、成功与失败、重逢与离别。直至多年之后的今天，我又一次用那个已经快陌生了的id登陆进去才发现已经挂在显著位置的那条讣告和那个名字。看着那个陌生的名字和那个熟悉的id，沉默许久之后才发现原来那么多网站头条新闻里的那个面孔原来离我这么近。在论坛里搜索了很久你的印记，找到的都是一行行玩世不恭而又开朗乐观的言语，留下的也是一段段无伪存真的辞藻。 &emsp;&emsp;鬼使神差的我点到了下面这篇写于2012年文章，犹如他鬼使神差般的在那年回到这个论坛一样。在此之前，或者说在我加入这个论坛之前就有兄弟问他为什么要用这个id，为什么写的东西都只用天堂这个词做主语，一个为什么，两个为什么和无数的为什么。 【诈尸贴】10周年了。首先声明，没人代笔，绝对的诈尸帖。 也不知道这几天怎么了，浑身上下哪儿哪儿都不舒服，尿频，尿急，尿不净，接踵而至。 我起码有1.5+年没登陆了，我是说，起码。 鬼使神差的输入了公社的地址，10年前用Photoshop 3.x拼的那个logo还是那么小清新般的粗糙。 必然点水园。 置顶贴的writer居然是“Linux盲”…..热泪如尿崩般的哗啦啦流满键盘，浸湿了香烟…….. 浑身不由一抖，随写下诈尸帖。 公社你好，10年真美。 天堂。 看来天堂需要一个新的火炬了，一个永远熊熊燃烧的充满朝气与阳光的火炬。 论坛：中国Linux公社 ID：我在天堂等你 本名：茅侃侃]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[再见，中途岛]]></title>
    <url>%2F2018%2F02%2F27%2F%E5%86%8D%E8%A7%81%EF%BC%8C%E4%B8%AD%E9%80%94%E5%B2%9B%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;中途岛海战是二战中很著名的一场战役，气势汹汹的大日本帝国海军精锐在此战中元气大伤，从此萎顿直至战败。而坐落在圣迭戈海边的这艘以midway命名的退役航母曾经经历过无数次硝烟和战火的洗礼。 &emsp;&emsp;这个参加过朝鲜战争，越南战争，常驻日本横须贺基地达17年之久的老兵如今的归宿是在加州的阳光、海浪、沙滩的陪伴下静静的坐在岸边给每一个前来参观的游客讲述曾经的故事，为每一位登上这艘战舰的孩子准备了一个有史以来最大的飞机游乐场。 &emsp;&emsp;甲板上停着各式各样的飞机，从螺旋桨式的飞机到喷气式飞机，从战斗机到加油机，从固定翼飞机到直升机，每个孩子对着这些琳琅满目的飞机完全都失去了抵抗力，爬上窜下忙的不亦乐乎。而且很人性化的给每架飞机都配了多国语言的语音说明，手持一个讲解器一刷就能听，实在是方便的很^_^。 ##接下来是各种飞机展示 臭美小辣椒在甲板上爬直升机爬的灿烂的不行，这时候才发现没带单反真是个错误，很多镜头拿手机都拍不出来，中途岛号实在太大了，完全没法拍。 某人的镜头感还是不错的，就是我拍照技术不好，总是感觉色彩要溢出了。]]></content>
      <categories>
        <category>美国</category>
      </categories>
      <tags>
        <tag>游记 美国</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[旅行的意义]]></title>
    <url>%2F2018%2F02%2F26%2F%E6%97%85%E8%A1%8C%E7%9A%84%E6%84%8F%E4%B9%89%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;每年几次的国外旅行似乎已经成为了人生中不可或缺的一部分。异国也好，他乡也罢都成为了一年中最期待的一段故事。圣莫妮卡海滩的霞光仿佛就是昨天才看过。 &emsp;&emsp;从小到大去过很多次国内的海边，青岛也好，大连也好，还是后来的三亚和厦门，带着记忆中装满的海腥味和那抹沙黄飞跃了整个太平洋来到了另一个海边，看到了另一种海的样子。金色的海滩，无数埋在沙滩里的生机盎然贝壳，除了paradise这个词，我实在找不出一个词语来形容这片海滩了。]]></content>
      <categories>
        <category>美国</category>
      </categories>
      <tags>
        <tag>游记 美国</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天空，姑娘和帅哥]]></title>
    <url>%2F2018%2F02%2F24%2F%E5%A4%A9%E7%A9%BA%EF%BC%8C%E5%A7%91%E5%A8%98%E5%92%8C%E5%B8%85%E5%93%A5%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;第一天到达洛杉矶，飞了13个小时的我们迫不及待的呼吸了一口美利坚的空气，好像也有尾气的味道，但是为啥人家的天空能这么蓝呢。。。。。 冲进网红汉堡店来了一口，话说这泡椒也太辣了吧。 &emsp;&emsp;酒足饭饱后杀向星光大道，无数的星星，老婆大人被一个假冒的蝙蝠侠迷得晕头转向的冒心心眼。而我只找到了席拉迪温的那个星星。。。。。 &emsp;&emsp;帅哥第一天到美国，很是新奇，一路被土著美国人说“so cute”]]></content>
      <categories>
        <category>美国</category>
      </categories>
      <tags>
        <tag>游记 美国</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试flickr]]></title>
    <url>%2F2018%2F02%2F24%2F%E6%B5%8B%E8%AF%95flickr%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;有很多私人的照片放微信总是感觉不安全，各种大数据犹如一个枷锁套在我的手机上，so开了hexo放放私人的东西。]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
